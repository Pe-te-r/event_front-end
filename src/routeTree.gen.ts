/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as OrganizerRouteImport } from './routes/organizer'
import { Route as MyEventsRouteImport } from './routes/my-events'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrganizerIndexRouteImport } from './routes/organizer/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as OrganizerSettingsRouteImport } from './routes/organizer/settings'
import { Route as OrganizerMyHostedEventsRouteImport } from './routes/organizer/my-hosted-events'
import { Route as OrganizerCreateRouteImport } from './routes/organizer/create'
import { Route as EventsCreateRouteImport } from './routes/events/create'
import { Route as EventsIdRouteImport } from './routes/events/$id'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/Login'
import { Route as OrganizerEventsIndexRouteImport } from './routes/organizer/events/index'
import { Route as DashboardUsersIndexRouteImport } from './routes/dashboard/users/index'
import { Route as DashboardPaymentsIndexRouteImport } from './routes/dashboard/payments/index'
import { Route as DashboardEventsIndexRouteImport } from './routes/dashboard/events/index'
import { Route as OrganizerEventsIdRouteImport } from './routes/organizer/events/$id'
import { Route as DashboardUsersIdRouteImport } from './routes/dashboard/users/$id'
import { Route as DashboardEventsIdRouteImport } from './routes/dashboard/events/$id'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizerRoute = OrganizerRouteImport.update({
  id: '/organizer',
  path: '/organizer',
  getParentRoute: () => rootRouteImport,
} as any)
const MyEventsRoute = MyEventsRouteImport.update({
  id: '/my-events',
  path: '/my-events',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizerIndexRoute = OrganizerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrganizerRoute,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const OrganizerSettingsRoute = OrganizerSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => OrganizerRoute,
} as any)
const OrganizerMyHostedEventsRoute = OrganizerMyHostedEventsRouteImport.update({
  id: '/my-hosted-events',
  path: '/my-hosted-events',
  getParentRoute: () => OrganizerRoute,
} as any)
const OrganizerCreateRoute = OrganizerCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => OrganizerRoute,
} as any)
const EventsCreateRoute = EventsCreateRouteImport.update({
  id: '/events/create',
  path: '/events/create',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIdRoute = EventsIdRouteImport.update({
  id: '/events/$id',
  path: '/events/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/Login',
  path: '/Login',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizerEventsIndexRoute = OrganizerEventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => OrganizerRoute,
} as any)
const DashboardUsersIndexRoute = DashboardUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardPaymentsIndexRoute = DashboardPaymentsIndexRouteImport.update({
  id: '/payments/',
  path: '/payments/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardEventsIndexRoute = DashboardEventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => DashboardRoute,
} as any)
const OrganizerEventsIdRoute = OrganizerEventsIdRouteImport.update({
  id: '/events/$id',
  path: '/events/$id',
  getParentRoute: () => OrganizerRoute,
} as any)
const DashboardUsersIdRoute = DashboardUsersIdRouteImport.update({
  id: '/users/$id',
  path: '/users/$id',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardEventsIdRoute = DashboardEventsIdRouteImport.update({
  id: '/events/$id',
  path: '/events/$id',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/my-events': typeof MyEventsRoute
  '/organizer': typeof OrganizerRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/Login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/events/$id': typeof EventsIdRoute
  '/events/create': typeof EventsCreateRoute
  '/organizer/create': typeof OrganizerCreateRoute
  '/organizer/my-hosted-events': typeof OrganizerMyHostedEventsRoute
  '/organizer/settings': typeof OrganizerSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/events': typeof EventsIndexRoute
  '/organizer/': typeof OrganizerIndexRoute
  '/dashboard/events/$id': typeof DashboardEventsIdRoute
  '/dashboard/users/$id': typeof DashboardUsersIdRoute
  '/organizer/events/$id': typeof OrganizerEventsIdRoute
  '/dashboard/events': typeof DashboardEventsIndexRoute
  '/dashboard/payments': typeof DashboardPaymentsIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
  '/organizer/events': typeof OrganizerEventsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/my-events': typeof MyEventsRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/Login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/events/$id': typeof EventsIdRoute
  '/events/create': typeof EventsCreateRoute
  '/organizer/create': typeof OrganizerCreateRoute
  '/organizer/my-hosted-events': typeof OrganizerMyHostedEventsRoute
  '/organizer/settings': typeof OrganizerSettingsRoute
  '/dashboard': typeof DashboardIndexRoute
  '/events': typeof EventsIndexRoute
  '/organizer': typeof OrganizerIndexRoute
  '/dashboard/events/$id': typeof DashboardEventsIdRoute
  '/dashboard/users/$id': typeof DashboardUsersIdRoute
  '/organizer/events/$id': typeof OrganizerEventsIdRoute
  '/dashboard/events': typeof DashboardEventsIndexRoute
  '/dashboard/payments': typeof DashboardPaymentsIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
  '/organizer/events': typeof OrganizerEventsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/my-events': typeof MyEventsRoute
  '/organizer': typeof OrganizerRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/(auth)/Login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/events/$id': typeof EventsIdRoute
  '/events/create': typeof EventsCreateRoute
  '/organizer/create': typeof OrganizerCreateRoute
  '/organizer/my-hosted-events': typeof OrganizerMyHostedEventsRoute
  '/organizer/settings': typeof OrganizerSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/events/': typeof EventsIndexRoute
  '/organizer/': typeof OrganizerIndexRoute
  '/dashboard/events/$id': typeof DashboardEventsIdRoute
  '/dashboard/users/$id': typeof DashboardUsersIdRoute
  '/organizer/events/$id': typeof OrganizerEventsIdRoute
  '/dashboard/events/': typeof DashboardEventsIndexRoute
  '/dashboard/payments/': typeof DashboardPaymentsIndexRoute
  '/dashboard/users/': typeof DashboardUsersIndexRoute
  '/organizer/events/': typeof OrganizerEventsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/my-events'
    | '/organizer'
    | '/privacy'
    | '/terms'
    | '/Login'
    | '/register'
    | '/dashboard/settings'
    | '/events/$id'
    | '/events/create'
    | '/organizer/create'
    | '/organizer/my-hosted-events'
    | '/organizer/settings'
    | '/dashboard/'
    | '/events'
    | '/organizer/'
    | '/dashboard/events/$id'
    | '/dashboard/users/$id'
    | '/organizer/events/$id'
    | '/dashboard/events'
    | '/dashboard/payments'
    | '/dashboard/users'
    | '/organizer/events'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/my-events'
    | '/privacy'
    | '/terms'
    | '/Login'
    | '/register'
    | '/dashboard/settings'
    | '/events/$id'
    | '/events/create'
    | '/organizer/create'
    | '/organizer/my-hosted-events'
    | '/organizer/settings'
    | '/dashboard'
    | '/events'
    | '/organizer'
    | '/dashboard/events/$id'
    | '/dashboard/users/$id'
    | '/organizer/events/$id'
    | '/dashboard/events'
    | '/dashboard/payments'
    | '/dashboard/users'
    | '/organizer/events'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/my-events'
    | '/organizer'
    | '/privacy'
    | '/terms'
    | '/(auth)/Login'
    | '/(auth)/register'
    | '/dashboard/settings'
    | '/events/$id'
    | '/events/create'
    | '/organizer/create'
    | '/organizer/my-hosted-events'
    | '/organizer/settings'
    | '/dashboard/'
    | '/events/'
    | '/organizer/'
    | '/dashboard/events/$id'
    | '/dashboard/users/$id'
    | '/organizer/events/$id'
    | '/dashboard/events/'
    | '/dashboard/payments/'
    | '/dashboard/users/'
    | '/organizer/events/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  MyEventsRoute: typeof MyEventsRoute
  OrganizerRoute: typeof OrganizerRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  EventsIdRoute: typeof EventsIdRoute
  EventsCreateRoute: typeof EventsCreateRoute
  EventsIndexRoute: typeof EventsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizer': {
      id: '/organizer'
      path: '/organizer'
      fullPath: '/organizer'
      preLoaderRoute: typeof OrganizerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-events': {
      id: '/my-events'
      path: '/my-events'
      fullPath: '/my-events'
      preLoaderRoute: typeof MyEventsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizer/': {
      id: '/organizer/'
      path: '/'
      fullPath: '/organizer/'
      preLoaderRoute: typeof OrganizerIndexRouteImport
      parentRoute: typeof OrganizerRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/organizer/settings': {
      id: '/organizer/settings'
      path: '/settings'
      fullPath: '/organizer/settings'
      preLoaderRoute: typeof OrganizerSettingsRouteImport
      parentRoute: typeof OrganizerRoute
    }
    '/organizer/my-hosted-events': {
      id: '/organizer/my-hosted-events'
      path: '/my-hosted-events'
      fullPath: '/organizer/my-hosted-events'
      preLoaderRoute: typeof OrganizerMyHostedEventsRouteImport
      parentRoute: typeof OrganizerRoute
    }
    '/organizer/create': {
      id: '/organizer/create'
      path: '/create'
      fullPath: '/organizer/create'
      preLoaderRoute: typeof OrganizerCreateRouteImport
      parentRoute: typeof OrganizerRoute
    }
    '/events/create': {
      id: '/events/create'
      path: '/events/create'
      fullPath: '/events/create'
      preLoaderRoute: typeof EventsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$id': {
      id: '/events/$id'
      path: '/events/$id'
      fullPath: '/events/$id'
      preLoaderRoute: typeof EventsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/Login': {
      id: '/(auth)/Login'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizer/events/': {
      id: '/organizer/events/'
      path: '/events'
      fullPath: '/organizer/events'
      preLoaderRoute: typeof OrganizerEventsIndexRouteImport
      parentRoute: typeof OrganizerRoute
    }
    '/dashboard/users/': {
      id: '/dashboard/users/'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/payments/': {
      id: '/dashboard/payments/'
      path: '/payments'
      fullPath: '/dashboard/payments'
      preLoaderRoute: typeof DashboardPaymentsIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/events/': {
      id: '/dashboard/events/'
      path: '/events'
      fullPath: '/dashboard/events'
      preLoaderRoute: typeof DashboardEventsIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/organizer/events/$id': {
      id: '/organizer/events/$id'
      path: '/events/$id'
      fullPath: '/organizer/events/$id'
      preLoaderRoute: typeof OrganizerEventsIdRouteImport
      parentRoute: typeof OrganizerRoute
    }
    '/dashboard/users/$id': {
      id: '/dashboard/users/$id'
      path: '/users/$id'
      fullPath: '/dashboard/users/$id'
      preLoaderRoute: typeof DashboardUsersIdRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/events/$id': {
      id: '/dashboard/events/$id'
      path: '/events/$id'
      fullPath: '/dashboard/events/$id'
      preLoaderRoute: typeof DashboardEventsIdRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardEventsIdRoute: typeof DashboardEventsIdRoute
  DashboardUsersIdRoute: typeof DashboardUsersIdRoute
  DashboardEventsIndexRoute: typeof DashboardEventsIndexRoute
  DashboardPaymentsIndexRoute: typeof DashboardPaymentsIndexRoute
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardEventsIdRoute: DashboardEventsIdRoute,
  DashboardUsersIdRoute: DashboardUsersIdRoute,
  DashboardEventsIndexRoute: DashboardEventsIndexRoute,
  DashboardPaymentsIndexRoute: DashboardPaymentsIndexRoute,
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface OrganizerRouteChildren {
  OrganizerCreateRoute: typeof OrganizerCreateRoute
  OrganizerMyHostedEventsRoute: typeof OrganizerMyHostedEventsRoute
  OrganizerSettingsRoute: typeof OrganizerSettingsRoute
  OrganizerIndexRoute: typeof OrganizerIndexRoute
  OrganizerEventsIdRoute: typeof OrganizerEventsIdRoute
  OrganizerEventsIndexRoute: typeof OrganizerEventsIndexRoute
}

const OrganizerRouteChildren: OrganizerRouteChildren = {
  OrganizerCreateRoute: OrganizerCreateRoute,
  OrganizerMyHostedEventsRoute: OrganizerMyHostedEventsRoute,
  OrganizerSettingsRoute: OrganizerSettingsRoute,
  OrganizerIndexRoute: OrganizerIndexRoute,
  OrganizerEventsIdRoute: OrganizerEventsIdRoute,
  OrganizerEventsIndexRoute: OrganizerEventsIndexRoute,
}

const OrganizerRouteWithChildren = OrganizerRoute._addFileChildren(
  OrganizerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  MyEventsRoute: MyEventsRoute,
  OrganizerRoute: OrganizerRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  EventsIdRoute: EventsIdRoute,
  EventsCreateRoute: EventsCreateRoute,
  EventsIndexRoute: EventsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
