/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MyHostedEventsRouteImport } from './routes/my-hosted-events'
import { Route as MyEventsRouteImport } from './routes/my-events'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as EventsCreateRouteImport } from './routes/events/create'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/Login'
import { Route as AdminsUsersRouteImport } from './routes/admins/users'
import { Route as AdminsDashboardRouteImport } from './routes/admins/dashboard'

const MyHostedEventsRoute = MyHostedEventsRouteImport.update({
  id: '/my-hosted-events',
  path: '/my-hosted-events',
  getParentRoute: () => rootRouteImport,
} as any)
const MyEventsRoute = MyEventsRouteImport.update({
  id: '/my-events',
  path: '/my-events',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsCreateRoute = EventsCreateRouteImport.update({
  id: '/events/create',
  path: '/events/create',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/Login',
  path: '/auth/Login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminsUsersRoute = AdminsUsersRouteImport.update({
  id: '/admins/users',
  path: '/admins/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminsDashboardRoute = AdminsDashboardRouteImport.update({
  id: '/admins/dashboard',
  path: '/admins/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/my-events': typeof MyEventsRoute
  '/my-hosted-events': typeof MyHostedEventsRoute
  '/admins/dashboard': typeof AdminsDashboardRoute
  '/admins/users': typeof AdminsUsersRoute
  '/auth/Login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/events/create': typeof EventsCreateRoute
  '/events': typeof EventsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/my-events': typeof MyEventsRoute
  '/my-hosted-events': typeof MyHostedEventsRoute
  '/admins/dashboard': typeof AdminsDashboardRoute
  '/admins/users': typeof AdminsUsersRoute
  '/auth/Login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/events/create': typeof EventsCreateRoute
  '/events': typeof EventsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/my-events': typeof MyEventsRoute
  '/my-hosted-events': typeof MyHostedEventsRoute
  '/admins/dashboard': typeof AdminsDashboardRoute
  '/admins/users': typeof AdminsUsersRoute
  '/auth/Login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/events/create': typeof EventsCreateRoute
  '/events/': typeof EventsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/my-events'
    | '/my-hosted-events'
    | '/admins/dashboard'
    | '/admins/users'
    | '/auth/Login'
    | '/auth/register'
    | '/events/create'
    | '/events'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/my-events'
    | '/my-hosted-events'
    | '/admins/dashboard'
    | '/admins/users'
    | '/auth/Login'
    | '/auth/register'
    | '/events/create'
    | '/events'
  id:
    | '__root__'
    | '/'
    | '/my-events'
    | '/my-hosted-events'
    | '/admins/dashboard'
    | '/admins/users'
    | '/auth/Login'
    | '/auth/register'
    | '/events/create'
    | '/events/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MyEventsRoute: typeof MyEventsRoute
  MyHostedEventsRoute: typeof MyHostedEventsRoute
  AdminsDashboardRoute: typeof AdminsDashboardRoute
  AdminsUsersRoute: typeof AdminsUsersRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  EventsCreateRoute: typeof EventsCreateRoute
  EventsIndexRoute: typeof EventsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/my-hosted-events': {
      id: '/my-hosted-events'
      path: '/my-hosted-events'
      fullPath: '/my-hosted-events'
      preLoaderRoute: typeof MyHostedEventsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-events': {
      id: '/my-events'
      path: '/my-events'
      fullPath: '/my-events'
      preLoaderRoute: typeof MyEventsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/create': {
      id: '/events/create'
      path: '/events/create'
      fullPath: '/events/create'
      preLoaderRoute: typeof EventsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/Login': {
      id: '/auth/Login'
      path: '/auth/Login'
      fullPath: '/auth/Login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admins/users': {
      id: '/admins/users'
      path: '/admins/users'
      fullPath: '/admins/users'
      preLoaderRoute: typeof AdminsUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admins/dashboard': {
      id: '/admins/dashboard'
      path: '/admins/dashboard'
      fullPath: '/admins/dashboard'
      preLoaderRoute: typeof AdminsDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MyEventsRoute: MyEventsRoute,
  MyHostedEventsRoute: MyHostedEventsRoute,
  AdminsDashboardRoute: AdminsDashboardRoute,
  AdminsUsersRoute: AdminsUsersRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  EventsCreateRoute: EventsCreateRoute,
  EventsIndexRoute: EventsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
